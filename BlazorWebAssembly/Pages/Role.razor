@page "/role"
@inject LayoutService LayoutService
@inject RoleService RoleService
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="role-management">

    <table class="table">
        <thead>
            <tr>
                <th>Role Name</th>
                <th style="text-align: right;">Action</th>
            </tr>
        </thead>
        <tbody>
            @if (roles != null && roles.Count > 0)
            {
                @foreach (var role in roles)
                {
                    <tr>
                        <td>@role.Name</td>
                        <td style="text-align: right;">
                            <button class="btn btn-outline-secondary me-2" style="font-size: 13px;" @onclick="() => DeleteRole(role.Id)">
                                <i class="fa fa-trash" ></i> Delete
                            </button>

                            <button class="btn btn-outline-primary btn-sm" style="font-size: 13px; min-height: 33px" @onclick="() => EditRole(role.Id)">
                                <i class="fa fa-edit "></i> Edit
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="2" class="text-center">No roles found.</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination -->
    @if (pagination != null && pagination.TotalPages > 1)
    {
        <Pagination TData="RoleModel" OnPageChanged="OnPageChanged" PaginationModel="pagination" CurrentPage="currentPage" />
    }
</div>

@code {
    private List<RoleModel> roles = new List<RoleModel>();
    private PaginationModel pagination = new PaginationModel();
    private int currentPage = 1;
    private int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        var breadcrumb = new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Name = "Dashboard", Url = "/", IsActive = false },
            new BreadcrumbItem { Name = "Role", Url = "/role", IsActive = true }
        };
        LayoutService.SetTitleAndBreadcrumb("Role", breadcrumb);

        await LoadRolesAsync();
    }

    private async Task LoadRolesAsync()
    {
        var response = await RoleService.GetRolesAsync(currentPage, pageSize);

        if (response != null)
        {
            roles = response.Data ?? new List<RoleModel>();
            pagination = response.Pagination ?? new PaginationModel();
        }
        else
        {
            roles = new List<RoleModel>();
            pagination = new PaginationModel();
        }
    }

    // Xử lý sự kiện chỉnh sửa role
    private void EditRole(int roleId)
    {
        // Điều hướng hoặc thực hiện logic chỉnh sửa tại đây
        NavigationManager.NavigateTo($"/role/{roleId}");
    }

    // Xử lý sự kiện xóa role
    private async Task DeleteRole(int roleId)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Are you sure you want to delete this role?" });
        if (confirmDelete)
        {
            // Thực hiện xóa role tại đây
            Console.WriteLine($"Delete role with ID: {roleId}");
            // Sau khi xóa, tải lại danh sách role
            await LoadRolesAsync();
        }
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadRolesAsync();
    }

    public void Dispose()
    {
        LayoutService.OnChange -= StateHasChanged;
    }
}
