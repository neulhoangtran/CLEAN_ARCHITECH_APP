@page "/users"
@inject LayoutService LayoutService
@inject UserService UserService
@implements IDisposable

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Username</th>
            <th scope="col">Email</th>
            <th scope="col">Full Name</th>
            <th scope="col">Phone Number</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null && users.Count > 0)
        {
            @foreach (var user in users)
            {
                <tr>
                    <th scope="row">@user.Id</th>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.FullName</td>
                    <td>@user.PhoneNumber</td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No users found.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
@if (pagination != null)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(pagination.HasPreviousPage ? "" : "disabled")">
                <a class="page-link" @onclick="PreviousPage">Previous</a>
            </li>
            @for (var i = 1; i <= pagination.TotalPages; i++)
            {
                <li class="page-item @(currentPage == i ? "active" : "")">
                    <a class="page-link" @onclick="() => SetPage(i)">@i</a>
                </li>
            }
            <li class="page-item @(pagination.HasNextPage ? "" : "disabled")">
                <a class="page-link" @onclick="NextPage">Next</a>
            </li>
        </ul>
    </nav>
}

@code {
    private List<UserModel> users;
    private PaginationModel pagination;
    private int currentPage = 1;
    private int pageSize = 20;

    protected override async Task OnInitializedAsync()
    {
        var breadcrumb = new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Name = "Dashboard", Url = "/", IsActive = false },
            new BreadcrumbItem { Name = "Users", Url = "/users", IsActive = true }
        };
        LayoutService.SetTitleAndBreadcrumb("User List", breadcrumb);

        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        var response = await UserService.GetUsersAsync(currentPage, pageSize);

        if (response != null)
        {
            users = response.Data ?? new List<UserModel>();  // Nếu response.Data null, khởi tạo danh sách rỗng
            pagination = response.Pagination ?? new PaginationModel(); // Nếu response.Pagination null, khởi tạo đối tượng mặc định
        }
        else
        {
            users = new List<UserModel>();
            pagination = new PaginationModel();
        }
    }


    private async Task SetPage(int pageNumber)
    {
        currentPage = pageNumber;
        await LoadUsersAsync();
    }

    private async Task PreviousPage()
    {
        if (pagination.HasPreviousPage)
        {
            currentPage--;
            await LoadUsersAsync();
        }
    }

    private async Task NextPage()
    {
        if (pagination.HasNextPage)
        {
            currentPage++;
            await LoadUsersAsync();
        }
    }

    public void Dispose()
    {
        LayoutService.OnChange -= StateHasChanged;
    }
}
