@page "/users"
@inject LayoutService LayoutService
@inject UserService UserService
@using BlazorWebAssembly.Components.Modals
@using BlazorWebAssembly.Models
@implements IDisposable
@inject Blazored.Modal.Services.IModalService ModalService
@inject IJSRuntime JS

<Toolbar FilterText="@filterText"
         OnFilterChanged="HandleFilterChanged"
         PlaceholderText="Search users..."
         SortOptions="@sortOptions"
         SelectedSort="@selectedSort"
         OnSortChangedCallback="HandleSortChanged"
         ShowExportButton="true"
         ShowNewButton="true"
         OnExportClicked="ExportUsers"
         OnNewClicked="CreateNewUser" />

<!-- User table -->
<table class="table">
    <thead class="thead-dark">
        <tr>
            <th scope="col">#</th>
            <th scope="col">Username</th>
            <th scope="col">Email</th>
            <th scope="col">Full Name</th>
            <th scope="col">Phone Number</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null && users.Count > 0)
        {
            @foreach (var user in users)
            {
                <tr>
                    <th scope="row">@user.Id</th>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.FullName</td>
                    <td>@user.PhoneNumber</td>
                    <td>
                        <span style="cursor: pointer;" @onclick="() => EditUser(user.Id)">
                            <i class="fa-regular fa-user-pen"></i>
                        </span>
                        <span style="cursor: pointer; margin-left: 10px;" @onclick="() => HideUser(user.Id)">
                            <i class="fa-solid fa-eye-slash"></i>
                        </span>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No users found.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination component -->
<Pagination TData="UserModel" OnPageChanged="OnPageChanged" PaginationModel="pagination" CurrentPage="currentPage" />

@code {
    private List<UserModel> users = new List<UserModel>();
    private PaginationModel pagination = new PaginationModel();
    private int currentPage = 1;
    private int pageSize = 10;
    private string currentFilter = string.Empty;
    private string currentSort = "username_asc";

    // Cập nhật sortOptions thành List<SortOption>
    private List<SortOption> sortOptions = new List<SortOption>
    {
        new SortOption { Label = "Username Ascending", Value = "username_asc" },
        new SortOption { Label = "Username Descending", Value = "username_desc" },
        new SortOption { Label = "Email Ascending", Value = "email_asc" },
        new SortOption { Label = "Email Descending", Value = "email_desc" }
    };

    private string filterText = string.Empty;
    private string selectedSort = "username_asc";

    protected override async Task OnInitializedAsync()
    {
        var breadcrumb = new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Name = "Dashboard", Url = "/", IsActive = false },
            new BreadcrumbItem { Name = "Users", Url = "/users", IsActive = true }
        };
        LayoutService.SetTitleAndBreadcrumb("User List", breadcrumb);

        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        var response = await UserService.GetUsersAsync(currentPage, pageSize, currentSort, currentFilter);

        if (response != null)
        {
            users = response.Data ?? new List<UserModel>(); // Nếu response.Data null, khởi tạo danh sách rỗng
            pagination = response.Pagination ?? new PaginationModel(); // Nếu response.Pagination null, khởi tạo đối tượng mặc định
        }
        else
        {
            users = new List<UserModel>();
            pagination = new PaginationModel();
        }
    }

    private async Task OnPageChanged(int newPage)
    {
        currentPage = newPage;
        await LoadUsersAsync();
    }

    private async Task HandleSortChanged(string sort)
    {
        selectedSort = sort;
        currentSort = sort;
        await LoadUsersAsync();
    }

    private async Task HandleFilterChanged(string filter)
    {
        filterText = filter;
        currentFilter = filter;
        await LoadUsersAsync();
    }

    private Task ExportUsers()
    {
        // Logic để xuất danh sách người dùng
        Console.WriteLine("Exporting users...");
        return Task.CompletedTask;
    }

    private async Task CreateNewUser()
    {
        var options = new ModalOptions
            {
                DisableBackgroundCancel = true,
                HideCloseButton = true,
                Position = ModalPosition.Middle,
                Size = ModalSize.ExtraLarge
            };

        var modal = ModalService.Show<AddUserModal>("Add New User", options);

        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var newUser = (UserModel)result.Data;

            // Gọi UserService để thêm user mới
            var success = await UserService.AddUserAsync(newUser);
            if (success)
            {
                users.Add(newUser);
            }
            else
            {
                // Xử lý nếu có lỗi xảy ra
                Console.WriteLine("An error occurred while adding the user.");
            }
        }
    }


    private async Task EditUser(int userId)
    {
        var user = users.FirstOrDefault(u => u.Id == userId);
        if (user == null)
        {
            Console.WriteLine("User not found");
            return;
        }

        var options = new ModalOptions
            {
                DisableBackgroundCancel = true,
                HideCloseButton = true,
                Position = ModalPosition.Middle,
                Size = ModalSize.ExtraLarge
            };

        var parameters = new ModalParameters();
        parameters.Add("User", user);

        var modal = ModalService.Show<EditUserModal>("Edit User", parameters, options);
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            var updatedUser = (UserModel)result.Data;

            // Cập nhật user trong danh sách
            var success = await UserService.UpdateUserAsync(updatedUser);
            if (success)
            {
                var index = users.FindIndex(u => u.Id == updatedUser.Id);
                if (index >= 0)
                {
                    users[index] = updatedUser;
                }
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("An error occurred while updating the user.");
            }
        }
    }

    private async Task HideUser(int userId)
    {
        var user = users.FirstOrDefault(u => u.Id == userId);
        if (user == null)
        {
            Console.WriteLine("User not found");
            return;
        }

        var confirm = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to hide user '{user.Username}'?");
        if (confirm)
        {
            // Gọi API hoặc service để ẩn người dùng
            var success = await UserService.HideUserAsync(userId);
            if (success)
            {
                users.Remove(user);
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("An error occurred while hiding the user.");
            }
        }
    }

    


    public void Dispose()
    {
        LayoutService.OnChange -= StateHasChanged;
    }
}


