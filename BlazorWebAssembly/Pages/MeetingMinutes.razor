@page "/meeting-minutes"
@inject LayoutService LayoutService
@inject MeetingService MeetingService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="meeting-minutes">
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Issue</th>
                <th>Outcome</th>
                <th>Person in Charge</th>
                <th>Manager</th>
                <th>Schedule</th>
                <th>Status</th>
                <th>Notes</th>
                <th style="text-align: right;">Actions</th>
            </tr>
        </thead>
        <SortableList Items="meetingMinutes" Handle=".drag-handle" Context="minute" OnUpdate="@SortMeetingMinutes">
            <SortableItemTemplate Context="minute">
               <tr>
                    <td>
                        <div class="drag-handle">
                            <i class="is-size-4 fas fa-grip-vertical"></i>
                        </div>
                    </td>
                    <td>@minute.Issue</td>
                    <td>@minute.Issue</td>
                    <td>@minute.Outcome</td>
                    <td>@minute.PersonInCharge</td>
                    <td>@minute.Manager</td>
                    <td>@minute.Schedule</td>
                    <td>@minute.Status</td>
                    <td>@minute.Notes</td>
                    <td style="text-align: right;">
                        <button class="btn btn-outline-secondary me-2" @onclick="() => EditMeetingMinute(minute.Id)">
                            <i class="fa fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-danger" @onclick="() => DeleteMeetingMinute(minute.Id)">
                            <i class="fa fa-trash"></i>
                        </button>
                    </td>
                </tr>
            </SortableItemTemplate>
        </SortableList>
    </table>
</div>

@code {
    private List<MeetingMinuteModel> meetingMinutes = new List<MeetingMinuteModel>();

    protected override async Task OnInitializedAsync()
    {
        var breadcrumb = new List<BreadcrumbItem>
        {
            new BreadcrumbItem { Name = "Dashboard", Url = "/", IsActive = false },
            new BreadcrumbItem { Name = "Meeting Minutes", Url = "/meeting-minutes", IsActive = true }
        };
        LayoutService.SetTitleAndBreadcrumb("Meeting Minutes", breadcrumb);

        await LoadMeetingMinutesAsync();
    }

    private async Task LoadMeetingMinutesAsync()
    {
        meetingMinutes = await MeetingService.GetMeetingMinutesAsync();
    }

    private void EditMeetingMinute(int id)
    {
        NavigationManager.NavigateTo($"/meeting-minutes/edit/{id}");
    }

    private async Task DeleteMeetingMinute(int id)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this meeting minute?");
        if (confirmDelete)
        {
            meetingMinutes.RemoveAll(m => m.Id == id);
            StateHasChanged();
        }
    }

    private void SortMeetingMinutes((int oldIndex, int newIndex) indices)
    {
        var (oldIndex, newIndex) = indices;
        var items = meetingMinutes;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        StateHasChanged();
    }
}
