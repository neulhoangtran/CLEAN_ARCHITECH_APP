// <auto-generated />
using System;
using App.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241017020121_CreateUserDatabase")]
    partial class CreateUserDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ID");

                    b.HasIndex("PermissionName")
                        .IsUnique();

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8691),
                            Description = "View user list",
                            Group = "User",
                            PermissionName = "User_View",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8691)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8693),
                            Description = "Add new user",
                            Group = "User",
                            PermissionName = "User_Add",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8694)
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8695),
                            Description = "Edit user information",
                            Group = "User",
                            PermissionName = "User_Edit",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8696)
                        },
                        new
                        {
                            ID = 4,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8698),
                            Description = "Delete user",
                            Group = "User",
                            PermissionName = "User_Delete",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8698)
                        },
                        new
                        {
                            ID = 5,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8713),
                            Description = "Add new role",
                            Group = "Role",
                            PermissionName = "Role_Add",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8713)
                        },
                        new
                        {
                            ID = 6,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8715),
                            Description = "Edit role",
                            Group = "Role",
                            PermissionName = "Role_Edit",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8715)
                        },
                        new
                        {
                            ID = 7,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8717),
                            Description = "Delete role",
                            Group = "Role",
                            PermissionName = "Role_Delete",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8717)
                        },
                        new
                        {
                            ID = 8,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8730),
                            Description = "View checklist list",
                            Group = "Checklist",
                            PermissionName = "Checklist_View",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8731)
                        },
                        new
                        {
                            ID = 9,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8732),
                            Description = "Assign employees to shifts",
                            Group = "Checklist",
                            PermissionName = "Checklist_AssignShift",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8733)
                        },
                        new
                        {
                            ID = 10,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8734),
                            Description = "Confirm shifts",
                            Group = "Checklist",
                            PermissionName = "Checklist_ConfirmShift",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8735)
                        },
                        new
                        {
                            ID = 11,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8746),
                            Description = "View reports",
                            Group = "Report",
                            PermissionName = "Report_View",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8747)
                        },
                        new
                        {
                            ID = 12,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8757),
                            Description = "View daily logs",
                            Group = "DailyLog",
                            PermissionName = "DailyLog_View",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8757)
                        },
                        new
                        {
                            ID = 13,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8767),
                            Description = "Modify system settings",
                            Group = "Settings",
                            PermissionName = "Settings_Modify",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8768)
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8592),
                            RoleName = "Administrator",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8595)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8597),
                            RoleName = "Employee",
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8598)
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("Role_Permission", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("App.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8600),
                            Email = "admin@example.com",
                            EmployeeId = "ADMIN001",
                            PasswordHash = "3b612c75a7b5048a435fb6ec81e52ff92d6d795a8b5a9c17070f6a63c97a53b2",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 10, 17, 2, 1, 21, 296, DateTimeKind.Utc).AddTicks(8600),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("User_Profile", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("Role_User", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("App.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Domain.Entities.Token", b =>
                {
                    b.HasOne("App.Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("App.Domain.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("App.Domain.Entities.UserProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("App.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("App.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("App.Domain.Entities.User", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
