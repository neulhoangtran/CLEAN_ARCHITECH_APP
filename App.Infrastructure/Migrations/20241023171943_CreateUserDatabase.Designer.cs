// <auto-generated />
using System;
using App.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241023171943_CreateUserDatabase")]
    partial class CreateUserDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionCategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PermissionCategoryID");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4598),
                            Description = "View user list",
                            Name = "User_View",
                            PermissionCategoryID = 1,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4599)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4601),
                            Description = "Add new user",
                            Name = "User_Add",
                            PermissionCategoryID = 1,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4601)
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4603),
                            Description = "Edit user information",
                            Name = "User_Edit",
                            PermissionCategoryID = 1,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4603)
                        },
                        new
                        {
                            ID = 4,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4605),
                            Description = "Delete user",
                            Name = "User_Delete",
                            PermissionCategoryID = 1,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4605)
                        },
                        new
                        {
                            ID = 5,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4607),
                            Description = "Add new role",
                            Name = "Role_Add",
                            PermissionCategoryID = 2,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4607)
                        },
                        new
                        {
                            ID = 6,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4609),
                            Description = "Edit role",
                            Name = "Role_Edit",
                            PermissionCategoryID = 2,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4609)
                        },
                        new
                        {
                            ID = 7,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4610),
                            Description = "Delete role",
                            Name = "Role_Delete",
                            PermissionCategoryID = 2,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4611)
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.PermissionCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ID");

                    b.ToTable("PermissionCategories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4556),
                            Description = "Manage user permissions",
                            Name = "User",
                            Order = 10,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4556)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4560),
                            Description = "Manage role permissions",
                            Name = "Role",
                            Order = 20,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4560)
                        },
                        new
                        {
                            ID = 3,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4561),
                            Description = "Manage checklist permissions",
                            Name = "Checklist",
                            Order = 30,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4561)
                        },
                        new
                        {
                            ID = 4,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4562),
                            Description = "Manage report permissions",
                            Name = "Report Virus",
                            Order = 40,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4563)
                        },
                        new
                        {
                            ID = 5,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4564),
                            Description = "Manage meeting permissions",
                            Name = "Meeting",
                            Order = 50,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4564)
                        },
                        new
                        {
                            ID = 6,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4565),
                            Description = "Manage license permissions",
                            Name = "License",
                            Order = 60,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4565)
                        },
                        new
                        {
                            ID = 7,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4566),
                            Description = "Manage contract and bill permissions",
                            Name = "Contract & Bill",
                            Order = 70,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4567)
                        },
                        new
                        {
                            ID = 8,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4568),
                            Description = "Manage settings permissions",
                            Name = "Settings Management",
                            Order = 80,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4568)
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ID");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4390),
                            RoleName = "Administrator",
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4393)
                        },
                        new
                        {
                            ID = 2,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4395),
                            RoleName = "Employee",
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4395)
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.HasKey("RoleID", "PermissionID");

                    b.HasIndex("PermissionID");

                    b.ToTable("Role_Permission", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.Token", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("App.Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4397),
                            Email = "admin@example.com",
                            EmployeeId = "ADMIN001",
                            PasswordHash = "3b612c75a7b5048a435fb6ec81e52ff92d6d795a8b5a9c17070f6a63c97a53b2",
                            Status = 1,
                            UpdatedAt = new DateTime(2024, 10, 23, 17, 19, 42, 673, DateTimeKind.Utc).AddTicks(4397),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("User_Profile", (string)null);
                });

            modelBuilder.Entity("App.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Role_User", (string)null);

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            RoleID = 1
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Permission", b =>
                {
                    b.HasOne("App.Domain.Entities.PermissionCategory", "PermissionCategory")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionCategory");
                });

            modelBuilder.Entity("App.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("App.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("App.Domain.Entities.Token", b =>
                {
                    b.HasOne("App.Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("App.Domain.Entities.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("App.Domain.Entities.UserProfile", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("App.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Entities.User", "User")
                        .WithOne("UserRole")
                        .HasForeignKey("App.Domain.Entities.UserRole", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("App.Domain.Entities.PermissionCategory", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("App.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("App.Domain.Entities.User", b =>
                {
                    b.Navigation("Tokens");

                    b.Navigation("UserProfile")
                        .IsRequired();

                    b.Navigation("UserRole")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
